package com.example.stocks;import androidx.annotation.NonNull;import androidx.annotation.RequiresApi;import androidx.appcompat.app.AppCompatActivity;import androidx.appcompat.widget.Toolbar;import com.android.volley.DefaultRetryPolicy;import com.android.volley.Request;import com.android.volley.RequestQueue;import android.content.Context;import android.graphics.Canvas;import android.os.Build;import android.os.Handler;import android.util.Log;import android.widget.AdapterView;import androidx.core.content.ContextCompat;import androidx.recyclerview.widget.DividerItemDecoration;import androidx.recyclerview.widget.ItemTouchHelper;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import android.content.Intent;import android.content.SharedPreferences;import android.net.Uri;import android.os.Bundle;import android.text.method.LinkMovementMethod;import android.view.Menu;import android.view.MenuInflater;import android.view.MenuItem;import android.view.View;import android.widget.ArrayAdapter;import android.widget.RelativeLayout;import android.widget.TextView;import androidx.appcompat.widget.SearchView;import it.xabaras.android.recyclerview.swipedecorator.RecyclerViewSwipeDecorator;import com.android.volley.Response;import com.android.volley.VolleyError;import com.android.volley.toolbox.JsonObjectRequest;import com.android.volley.toolbox.Volley;import com.google.gson.Gson;import com.google.gson.reflect.TypeToken;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.lang.reflect.Type;import java.text.DecimalFormat;import java.util.Date;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.*;public class HomeActivity extends AppCompatActivity {        TextView finnhub_link;    TextView user_cash_balance;    TextView user_net_worth;    public ArrayList<String> related_stocks = new ArrayList<String>();    public static final String shared_prefs = "sharedPrefs";    public static final String text = "user_wallet";    public static final String price_details = "stock_prices_info";    public static final String watchlist = "user_watchlist";    public static final String portfolio = "user_portfolio";    public static final String stocks_prices = "current_prices";    public HashMap<String, String> user_watchlist_data = new HashMap<String, String>();    private RequestQueue mQueue;    public ArrayList<String> shared_pref_watchlist;    public ArrayList<String> shared_pref_portfolio;    ArrayAdapter<String> autocomplete_adapter;    Portfolio_RecyclerViewAdapter adapter1;    RecyclerViewAdapter adapter2;    public HashMap<String, String> user_portfolio = new HashMap<String, String>();    public HashMap<String, String> user_watchlist = new HashMap<String, String>();    public ArrayList<ArrayList<String>> final_portfolio_data = new ArrayList<ArrayList<String>>();    public ArrayList<ArrayList<String>> final_watchlist_data = new ArrayList<ArrayList<String>>();    public HashMap<String, ArrayList<String>> stocks_price_details = new HashMap<String, ArrayList<String>>();    public HashMap<String,Double> stock_prices_list = new HashMap<String, Double>();    Double net_worth = 0.0;    public Boolean data_loaded = false;    RelativeLayout home_layout, progress_bar_home;    public Boolean first_time = true;    public String wtl_final_val, pf_final_val;    public int n_shares = 0;    RecyclerView recyclerView1, recyclerView2;    public Boolean pf_refresh = false;    public Boolean wtl_refresh = false;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_home);//        SharedPreferences sharedPreferences = getSharedPreferences("MySharedPref",MODE_MULTI_PROCESS);//        SharedPreferences.Editor myEdit = sharedPreferences.edit();//        myEdit.putString("st", "1");//        myEdit.commit();        mQueue = Volley.newRequestQueue(this);        Toolbar homepage_toolbar = findViewById(R.id.homepage_toolbar);        setSupportActionBar(homepage_toolbar);        home_layout = (RelativeLayout) findViewById(R.id.home_layout);        home_layout.setVisibility(View.GONE);        progress_bar_home = (RelativeLayout) findViewById(R.id.progress_bar_home);        progress_bar_home.setVisibility(View.VISIBLE);        data_loaded = false;        // Date        Date date = new Date();        DateFormat df = new SimpleDateFormat("dd MMMM yyyy");        TimeZone pstTime = TimeZone.getTimeZone("America/Los_Angeles");        df.setTimeZone(pstTime);        TextView curr_date = (TextView) findViewById(R.id.curr_date);        curr_date.setText(df.format(date));        // Shared Preferences        // Reference: https://www.youtube.com/watch?v=3Zrwi3FFrC8&list=PLgCYzUzKIBE8TUoCyjomGFqzTFcJ05OaC&index=19        // Cash Balance        user_cash_balance = (TextView) findViewById(R.id.user_cash_balance);        SharedPreferences sharedPreferences = getSharedPreferences(shared_prefs, MODE_PRIVATE);        SharedPreferences.Editor editor = sharedPreferences.edit();        Gson gson = new Gson();        String LS_cash = sharedPreferences.getString(text, "");        if (LS_cash.equals(null) || LS_cash.isEmpty()) {            editor.putString(text, "25000.00");            editor.apply();            user_cash_balance.setText("$25000.00");        } else {            user_cash_balance.setText("$" + LS_cash);        }        Log.d("user_wallet", user_cash_balance.getText().toString());        // FinnHub Link        // Reference: https://stackoverflow.com/questions/43025993/how-do-i-open-a-browser-on-clicking-a-text-link-in-textview        finnhub_link = (TextView) findViewById(R.id.finnhub_link);        finnhub_link.setMovementMethod(LinkMovementMethod.getInstance());        finnhub_link.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                Intent browserIntent = new Intent(Intent.ACTION_VIEW);                browserIntent.setData(Uri.parse("https://finnhub.io/"));                startActivity(browserIntent);            }        });        // Converting HashMap to Arraylist        // Reference: https://www.geeksforgeeks.org/how-to-convert-hashmap-to-arraylist-in-java/        String current_portfolio = sharedPreferences.getString(portfolio, "");        if (!current_portfolio.isEmpty() && !current_portfolio.equals("")) {            Type type = new TypeToken<HashMap<String, String>>() {            }.getType();            user_portfolio = gson.fromJson(current_portfolio, type);        }        if (!user_portfolio.isEmpty()) {            Set<String> pf_keySet = user_portfolio.keySet();            shared_pref_portfolio = new ArrayList<String>(pf_keySet);//        Collections.sort(shared_pref_portfolio);            Log.d("dummy1", shared_pref_portfolio.toString());            // Getting the portfolio data for recyclerview            get_portfolio_data(shared_pref_portfolio, new VolleyCallback() {                @Override                public void onSuccess(ArrayList<String> related_stocks) {                }                @Override                public void onpfSuccess(ArrayList<ArrayList<String>> final_portfolio_data) throws InterruptedException {                    Log.d("final_pf", final_portfolio_data.toString());                    initRecyclerView1(final_portfolio_data);                }                @Override                public void onwtlSuccess(ArrayList<ArrayList<String>> final_watchlist_data) {                }            });            Log.d("final", final_portfolio_data.toString());        }        String current_watchlist = sharedPreferences.getString(watchlist, "");        if (!current_watchlist.equals("") || !current_watchlist.isEmpty()) {            Type type2 = new TypeToken<HashMap<String, String>>() {            }.getType();            user_watchlist = gson.fromJson(current_watchlist, type2);        }        Log.d("dummy3", user_watchlist.toString());        if (!user_watchlist.isEmpty()) {            Set<String> wtchlist_keySet = user_watchlist.keySet();            shared_pref_watchlist = new ArrayList<String>(wtchlist_keySet);//        Collections.sort(shared_pref_watchlist);            Log.d("dummy2", shared_pref_watchlist.toString());            // Getting the watchlist data for Recyclerview            get_watchlist_data(shared_pref_watchlist, new VolleyCallback() {                @Override                public void onSuccess(ArrayList<String> related_stocks) {                }                @Override                public void onpfSuccess(ArrayList<ArrayList<String>> final_portfolio_data) {                }                @Override                public void onwtlSuccess(ArrayList<ArrayList<String>> final_watchlist_data) throws InterruptedException {                    Log.d("watchlist", shared_pref_watchlist.toString());                    Log.d("final_wtl", final_watchlist_data.toString());                    initRecyclerView2(final_watchlist_data);                }            });        }        Log.d("user", stock_prices_list.toString());        update_user_net_worth(user_portfolio);        if (!final_portfolio_data.isEmpty()) {            final_portfolio_data.clear();        }        if (!final_watchlist_data.isEmpty()) {            final_watchlist_data.clear();        }        data_loaded = true;        Handler handler = new Handler();        if (data_loaded == true) {            handler.postDelayed(new Runnable() {                @Override                public void run() {                    data_loaded = false;                    progress_bar_home.setVisibility(View.GONE);                    home_layout.setVisibility(View.VISIBLE);                }            }, 3000);        }//        if(!user_watchlist.isEmpty() || !user_portfolio.isEmpty()){//            handler.postDelayed(new Runnable() {//            @Override//            public void run() {//                load_content();//            }//        }, 20000);////    }    }    public void update_user_net_worth(HashMap<String, String> user_portfolio) {        SharedPreferences sharedPreferences = getSharedPreferences(shared_prefs, MODE_PRIVATE);        SharedPreferences.Editor editor = sharedPreferences.edit();        Gson gson = new Gson();        if(!user_portfolio.isEmpty() && !user_portfolio.equals("")){            String prices_list = sharedPreferences.getString(stocks_prices, "");            Log.d("prices", prices_list);            if(!prices_list.isEmpty() && !prices_list.equals("")){                Type type1 = new TypeToken<HashMap<String, Double>>() {}.getType();                stock_prices_list = gson.fromJson(prices_list, type1);                for (Map.Entry mapElement : user_portfolio.entrySet()){                    String current_ticker = (String) mapElement.getKey();                    String shares = (String) mapElement.getValue();                    if(stock_prices_list.containsKey(current_ticker)){                        Double latest_price = stock_prices_list.get(current_ticker);                        Double temp = Integer.parseInt(shares) * latest_price;                        net_worth += temp;                    }                }            }        }        String money_left_in_wallet = sharedPreferences.getString(text, "0");        net_worth += Double.parseDouble(money_left_in_wallet);        user_net_worth = (TextView) findViewById(R.id.user_net_worth);        user_net_worth.setText("$" + get_formatted_prices(String.valueOf(net_worth)));    }    public void get_portfolio_data(ArrayList<String> pf_stocks_list, VolleyCallback callback){        SharedPreferences sharedPreferences = getSharedPreferences(shared_prefs, MODE_PRIVATE);        SharedPreferences.Editor editor = sharedPreferences.edit();        Gson gson = new Gson();        for(int i=0; i < pf_stocks_list.size(); i++){            ArrayList<String> pf_stock_data = new ArrayList<String>();            String current_ticker = pf_stocks_list.get(i);            String latest_price_url = "https://assignment-8-346123.wl.r.appspot.com/latest_price/" + current_ticker;            JsonObjectRequest request = new JsonObjectRequest(Request.Method.GET, latest_price_url, null,                    new Response.Listener<JSONObject>() {                        @RequiresApi(api = Build.VERSION_CODES.N)                        @Override                        public void onResponse(JSONObject response) {                            try {                                String prices_list = sharedPreferences.getString(stocks_prices, "");                                if(!prices_list.isEmpty() && !prices_list.equals("")){                                    Type type = new TypeToken<HashMap<String, Double>>() {}.getType();                                    stock_prices_list = gson.fromJson(prices_list, type);                                }                                if(!stock_prices_list.isEmpty() && stock_prices_list.containsKey(current_ticker)){                                    stock_prices_list.replace(current_ticker, Double.parseDouble(get_formatted_prices(response.getString("c"))));                                }                                else {                                    stock_prices_list.put(current_ticker, Double.parseDouble(get_formatted_prices(response.getString("c"))));                                }                                String prices_json_string = gson.toJson(stock_prices_list);                                editor.putString(stocks_prices, prices_json_string);                                editor.apply();                                pf_stock_data.add(current_ticker);                                pf_stock_data.add(user_portfolio.get(current_ticker));                                String json_string = sharedPreferences.getString(price_details, "");                                if(!json_string.isEmpty() || !json_string.equals("")){                                    Type type = new TypeToken<HashMap<String, ArrayList<String>>>() {}.getType();                                    stocks_price_details = gson.fromJson(json_string, type);                                }                                if(!stocks_price_details.isEmpty() && stocks_price_details.containsKey(current_ticker)){                                    ArrayList<String> temp_data = stocks_price_details.get(current_ticker);                                    Log.d("aaab", temp_data.toString());                                    n_shares = Integer.parseInt(temp_data.get(0));                                    Double diff = (response.getDouble("c") - Double.parseDouble(temp_data.get(1)))*n_shares;                                    String price_diff = get_formatted_prices(String.valueOf(diff));                                    Double pc = (diff / Double.parseDouble(temp_data.get(1))) * 100;                                    String percent_change = get_formatted_prices(String.valueOf(pc));                                    pf_final_val = "$" + price_diff + " (" + percent_change + "%)";                                }                                else{                                    pf_final_val = "$0.00 (0.00%)";                                }                                Double temp_price = response.getDouble("c");                                Double sum = temp_price * n_shares;                                pf_stock_data.add("$" + get_formatted_prices(String.valueOf(sum)));////                                String temp_ch = get_formatted_prices(response.getString("d"));//                                String temp_cp = get_formatted_prices(response.getString("dp"));////                                String change = "$" + Double.parseDouble(temp_ch);//                                String percent_change = " (" + Double.parseDouble(temp_cp) + "%)";                                pf_stock_data.add(pf_final_val);                                final_portfolio_data.add(pf_stock_data);                                callback.onpfSuccess(final_portfolio_data);                            }                            catch (JSONException | InterruptedException e){                                e.printStackTrace();                            }                        }                    }, new Response.ErrorListener() {                @Override                public void onErrorResponse(VolleyError error) {                    Log.d("ticker pf_prefs error", "Error is: " + error.getMessage());                }            });            mQueue.add(request);            try {                Thread.sleep(350);            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }    public void get_watchlist_data(ArrayList<String> wtl_stocks_list, VolleyCallback callback){        for(int i=0; i < wtl_stocks_list.size(); i++){            ArrayList<String> wtl_stock_data = new ArrayList<String>();            String current_ticker = wtl_stocks_list.get(i);            String latest_price_url = "https://assignment-8-346123.wl.r.appspot.com/latest_price/" + current_ticker;            JsonObjectRequest request = new JsonObjectRequest(Request.Method.GET, latest_price_url, null,                    new Response.Listener<JSONObject>() {                        @Override                        public void onResponse(JSONObject response) {                            try {                                wtl_stock_data.add(current_ticker);                                wtl_stock_data.add(user_watchlist.get(current_ticker));                                String temp_price = get_formatted_prices(response.getString("c"));                                wtl_stock_data.add("$" + temp_price);                                String temp_ch = get_formatted_prices(response.getString("d"));                                String temp_cp = get_formatted_prices(response.getString("dp"));                                String change = "$" + Double.parseDouble(temp_ch);                                String percent_change = " (" + Double.parseDouble(temp_cp) + "%)";                                wtl_stock_data.add(change + percent_change);                                final_watchlist_data.add(wtl_stock_data);                                Log.d("ffff", final_watchlist_data.toString());                                callback.onwtlSuccess(final_watchlist_data);                            }                            catch (JSONException | InterruptedException e){                                e.printStackTrace();                            }                        }                    }, new Response.ErrorListener() {                @Override                public void onErrorResponse(VolleyError error) {                    Log.d("ticker wtl_prefs error", "Error is: " + error.getMessage());                }            });            mQueue.add(request);            try {                Thread.sleep(350);            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }    private void initRecyclerView1(ArrayList<ArrayList<String>> final_portfolio_data) throws InterruptedException {        recyclerView1 = (RecyclerView) findViewById(R.id.user_portfolio);        LinearLayoutManager layoutManager1 = new LinearLayoutManager(HomeActivity.this);        recyclerView1.setLayoutManager(layoutManager1);        adapter1 = new Portfolio_RecyclerViewAdapter();        adapter1.setData(final_portfolio_data);//        ItemTouchHelper.Callback callback1 = new Portfolio_RecyclerRowMoveCallback(adapter1);//        ItemTouchHelper touchHelper1 = new ItemTouchHelper(callback1);//        touchHelper1.attachToRecyclerView(user_portfolio);        recyclerView1.setAdapter(adapter1);//        DividerItemDecoration dividerItemDecoration = new DividerItemDecoration(this, DividerItemDecoration.VERTICAL);//        user_portfolio.addItemDecoration(dividerItemDecoration);        ItemTouchHelper itemTouchHelper = new ItemTouchHelper(simpleCallback);        itemTouchHelper.attachToRecyclerView(recyclerView1);    }    ItemTouchHelper.SimpleCallback simpleCallback = new ItemTouchHelper.SimpleCallback(ItemTouchHelper.UP | ItemTouchHelper.DOWN | ItemTouchHelper.START | ItemTouchHelper.END, 0) {        @Override        public boolean onMove(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder, @NonNull RecyclerView.ViewHolder target) {            int from = viewHolder.getAdapterPosition();            int to = target.getAdapterPosition();            if(from < to){                for(int i = from; i < to; i++){                    Collections.swap(final_portfolio_data, i, i+1);                }            }            else{                for(int i = from; i > to; i--){                    Collections.swap(final_portfolio_data, i, i-1);                }            }//            if(from == 1){//                Log.d("aaya", "1");//                to = 0;//                Collections.swap(final_portfolio_data, 1, 0);//            }////            else if(from == 0){//                to = 1;//                Collections.swap(final_portfolio_data, 0, 1);//            }//            // working//            else if(from == 0){//                Log.d("aaya", "2");//                to = 1;//                Collections.swap(final_portfolio_data, 0, 1);//            }////            else if(from == 2){//                Log.d("aaya", "3");//                to = 1;//                Collections.swap(final_portfolio_data, 2, 1);//            }            recyclerView1.getAdapter().notifyItemMoved(from, to);            return false;        }        @Override        public void onSwiped(@NonNull RecyclerView.ViewHolder viewHolder, int direction) {        }    };    private void initRecyclerView2(ArrayList<ArrayList<String>> final_watchlist_data) throws InterruptedException {        Log.d("finally2", final_watchlist_data.toString());        recyclerView2  = (RecyclerView) findViewById(R.id.user_watchlist_stocks);        LinearLayoutManager layoutManager2 = new LinearLayoutManager(HomeActivity.this);        recyclerView2.setLayoutManager(layoutManager2);        adapter2 = new RecyclerViewAdapter();        Log.d("finally56", final_watchlist_data.toString());        adapter2.setData(HomeActivity.this, final_watchlist_data);        recyclerView2.setAdapter(adapter2);        ItemTouchHelper itemTouchHelper1 = new ItemTouchHelper(simpleCallback1);        itemTouchHelper1.attachToRecyclerView(recyclerView2);    }    ItemTouchHelper.SimpleCallback simpleCallback1 = new ItemTouchHelper.SimpleCallback(ItemTouchHelper.UP| ItemTouchHelper.DOWN, ItemTouchHelper.LEFT) {        @Override        public boolean onMove(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder, @NonNull RecyclerView.ViewHolder target) {            int from = viewHolder.getAdapterPosition();            int to = target.getAdapterPosition();            Log.d("from", String.valueOf(from));            if(from < to){                for(int i = from; i < to; i++){                    Collections.swap(final_watchlist_data, i, i+1);                }            }            else{                for(int i = from; i > to; i--){                    Collections.swap(final_watchlist_data, i, i-1);                }            }//            //working//            if(from == 1){//                to = 2;//                Collections.swap(final_watchlist_data, 0, 1);//            }////            //working//            else if(from == 2){//                to = 1;//                Collections.swap(final_watchlist_data, 2, 1);//            }////            else if(from == 0){//                to = 1;//                Collections.swap(final_watchlist_data, 1, 0);//            }            Log.d("a11", String.valueOf(from));            Log.d("a12", String.valueOf(to));            recyclerView2.getAdapter().notifyItemMoved(from, to);            return false;        }        @Override        public void onSwiped(@NonNull RecyclerView.ViewHolder viewHolder, int direction) {            final int index = viewHolder.getAdapterPosition();            SharedPreferences sharedPreferences = getSharedPreferences(shared_prefs, MODE_PRIVATE);            SharedPreferences.Editor editor = sharedPreferences.edit();            Gson gson = new Gson();            String ticker = final_watchlist_data.get(index).get(0);            String watchlist_json = sharedPreferences.getString(watchlist, "");            if(!watchlist_json.isEmpty() && !watchlist_json.equals("")){                Type type = new TypeToken<HashMap<String, String>>() {}.getType();                user_watchlist = gson.fromJson(watchlist_json, type);                Log.d("watchlist_1", user_watchlist.toString());            }            if(!user_watchlist.isEmpty() && user_watchlist.containsKey(ticker)){                user_watchlist.remove(ticker);            }            String updated_watchlist_json = gson.toJson(user_watchlist);            editor.putString(watchlist, updated_watchlist_json);            editor.apply();            Log.d("watchlist_2", user_watchlist.toString());            final_watchlist_data.remove(index);            adapter2.notifyItemRemoved(index);        }        @Override        public void onChildDraw(@NonNull Canvas c, @NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder, float dX, float dY, int actionState, boolean isCurrentlyActive) {            new RecyclerViewSwipeDecorator.Builder(HomeActivity.this, c, recyclerView, viewHolder, dX, dY, actionState, isCurrentlyActive)                    .addSwipeLeftBackgroundColor(ContextCompat.getColor(HomeActivity.this, R.color.red))                    .addSwipeLeftActionIcon(R.drawable.ic_delete)                    .create()                    .decorate();            super.onChildDraw(c, recyclerView, viewHolder, dX, dY, actionState, isCurrentlyActive);        }    };    @Override    public boolean onCreateOptionsMenu(Menu menu) {        Log.d("yeah", first_time.toString());        if(first_time== true){            first_time = false;            try {                Thread.sleep(3000);            }            catch (InterruptedException e){                e.printStackTrace();            }        }        MenuInflater inflater = getMenuInflater();        inflater.inflate(R.menu.navbar_menu, menu);        MenuItem searchMenu = menu.findItem(R.id.navbar_search_icon);        SearchView searchView = (SearchView) searchMenu.getActionView();        SearchView.SearchAutoComplete searchAutoComplete = (SearchView.SearchAutoComplete) searchView.findViewById(androidx.appcompat.R.id.search_src_text);        searchAutoComplete.setHint("Search...");        //noinspection RestrictedAPI        searchAutoComplete.setThreshold(1);        autocomplete_adapter = new ArrayAdapter<String>(this, android.R.layout.simple_dropdown_item_1line, related_stocks);        searchAutoComplete.setAdapter(autocomplete_adapter);        searchAutoComplete.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {                String querydata = (String) adapterView.getItemAtPosition(i);                Log.d("Hi", "Yeah!!");                String[] splited_data = querydata.split("\\s+");                String inp_ticker = splited_data[0];                searchAutoComplete.setText("" + inp_ticker);//                Reference: https://stackoverflow.com/questions/7149802/how-to-transfer-some-data-to-another-fragment                Log.d("queryString", String.valueOf(querydata));            }        });        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {            @Override            public boolean onQueryTextSubmit(String s) {                create_new_Intent(s);                return false;            }            @Override            public boolean onQueryTextChange(String s) {                Log.d("Input", s.toUpperCase(Locale.ROOT));                if(s.length() > 0){                    load_autocomplete_data(s.toUpperCase(Locale.ROOT), new VolleyCallback() {                        @Override                        public void onSuccess(ArrayList<String> related_stocks) {                            Log.d("results", related_stocks.toString());                            autocomplete_adapter.clear();                            autocomplete_adapter = new ArrayAdapter<String>(HomeActivity.this, android.R.layout.simple_dropdown_item_1line, related_stocks);                            searchAutoComplete.setAdapter(autocomplete_adapter);                            autocomplete_adapter.addAll(related_stocks);                            autocomplete_adapter.notifyDataSetChanged();                        }                        @Override                        public void onpfSuccess(ArrayList<ArrayList<String>> final_portfolio_data) { }                        @Override                        public void onwtlSuccess(ArrayList<ArrayList<String>> final_watchlist_data) { }                    });                }                return false;            }        });        return super.onCreateOptionsMenu(menu);    }    public void load_autocomplete_data(String input_char, VolleyCallback callback){        ArrayList<String> results = new ArrayList<String>();        related_stocks.clear();        String autocomplete_url = "https://assignment-8-346123.wl.r.appspot.com/autoComplete/" + input_char;        JsonObjectRequest request = new JsonObjectRequest(Request.Method.GET, autocomplete_url, null,                new Response.Listener<JSONObject>() {                    @Override                    public void onResponse(JSONObject response) {                        try {                            JSONArray results_array = response.getJSONArray("result");//                            HashMap<String, Boolean> companies_list = new HashMap<String, Boolean>();                            for (int i = 0; i < results_array.length(); i++){                                JSONObject curr_data = results_array.getJSONObject(i);                                String current_comp = curr_data.getString("description").toUpperCase(Locale.ROOT);                                if(curr_data.getString("type").equals("Common Stock")){                                    String temp = curr_data.getString("symbol") + " | " + curr_data.getString("description").toUpperCase(Locale.ROOT);                                    related_stocks.add(temp);                                }                            }                            Log.d("companies", related_stocks.toString());                            callback.onSuccess(related_stocks);                        }                        catch (JSONException e){                            e.printStackTrace();                        }                    }                }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {                Log.d("AutoComplete Error Msg", "Error is: " + error.getMessage());            }        });        request.setShouldCache(false);        request.setRetryPolicy(new DefaultRetryPolicy(0,                DefaultRetryPolicy.DEFAULT_MAX_RETRIES, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));        mQueue.add(request);    }    public void create_new_Intent(String s){        Intent intent = new Intent(HomeActivity.this, company_details.class);        intent.putExtra("input_ticker", s.toUpperCase(Locale.ROOT));        startActivity(intent);    }    public interface VolleyCallback{        void onSuccess(ArrayList<String> related_stocks);        void onpfSuccess(ArrayList<ArrayList<String>> final_portfolio_data) throws InterruptedException;        void onwtlSuccess(ArrayList<ArrayList<String>> final_watchlist_data) throws InterruptedException;    }    private String get_formatted_prices(String p){        Double price = Double.valueOf(p);        DecimalFormat f = new DecimalFormat("0.00");        return String.valueOf(f.format(price));    }    public void load_content(){        final_portfolio_data.clear();        final_watchlist_data.clear();        Handler handler = new Handler();        SharedPreferences sharedPreferences = getSharedPreferences(shared_prefs, MODE_PRIVATE);        SharedPreferences.Editor editor = sharedPreferences.edit();        Gson gson = new Gson();        String current_portfolio = sharedPreferences.getString(portfolio, "");        if(!current_portfolio.isEmpty() && !current_portfolio.equals("")){            Type type = new TypeToken<HashMap<String, String>>() {}.getType();            user_portfolio = gson.fromJson(current_portfolio, type);        }        if(!user_portfolio.isEmpty()){            Set<String> pf_keySet = user_portfolio.keySet();            shared_pref_portfolio = new ArrayList<String>(pf_keySet);//        Collections.sort(shared_pref_portfolio);            // Getting the portfolio data for recyclerview            get_portfolio_data(shared_pref_portfolio, new VolleyCallback(){                @Override                public void onSuccess(ArrayList<String> related_stocks) { }                @Override                public void onpfSuccess(ArrayList<ArrayList<String>> final_portfolio_data) throws InterruptedException {                    Log.d("final_pf", final_portfolio_data.toString());                    initRecyclerView1(final_portfolio_data);                }                @Override                public void onwtlSuccess(ArrayList<ArrayList<String>> final_watchlist_data) { }            });        }        String current_watchlist = sharedPreferences.getString(watchlist, "");        if(!current_watchlist.equals("") || !current_watchlist.isEmpty()){            Type type2 = new TypeToken<HashMap<String, String>>() {}.getType();            user_watchlist = gson.fromJson(current_watchlist, type2);        }        if(!user_watchlist.isEmpty()){            Set<String> wtchlist_keySet = user_watchlist.keySet();            shared_pref_watchlist = new ArrayList<String>(wtchlist_keySet);//        Collections.sort(shared_pref_watchlist);            // Getting the watchlist data for Recyclerview            get_watchlist_data(shared_pref_watchlist, new VolleyCallback() {                @Override                public void onSuccess(ArrayList<String> related_stocks) { }                @Override                public void onpfSuccess(ArrayList<ArrayList<String>> final_portfolio_data) { }                @Override                public void onwtlSuccess(ArrayList<ArrayList<String>> final_watchlist_data) throws InterruptedException {//                    Log.d("watchlist", shared_pref_watchlist.toString());//                    Log.d("final_wtl", final_watchlist_data.toString());                    initRecyclerView2(final_watchlist_data);                }            });        }        // Update the net worth        net_worth = 0.0;        update_user_net_worth(user_portfolio);        Log.d("Data Updated", "Hurray!!");        refresh_data(15000);    }    public void refresh_data(int millisec){        final Handler handler = new Handler();        final Runnable runnable = new Runnable() {            @Override            public void run() {                load_content();            }        };        handler.postDelayed(runnable, millisec);    }}